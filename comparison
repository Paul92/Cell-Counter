                                    Linked List vs Array vs Binary Tree

1. Data Usage

A. Array

    - Data

B. Linked List

    - Data
    - Pointer to next node

    - Pointer to previous node (*) => Double Linked List

C. Binary Tree

    - Data
    - Pointer to left child
    - Pointer to right child 


Winner : Array                  2nd : Linked List               3rd : Binary Tree

2. Accessing the n-th element

A. Array

    - Array allows random access        |
                                        | =>    One operation needed
    - Index = n                         |

B. Linked List

    - We need to access elements sequentially starting from the first node => N operations needed

     ______________		 ______________						 ______________
    /              \  1 op	/              \  2nd op                 (n-1)th op	/	       \
   |  1st element   | -------> |   2nd element  | --------> ............ ------------> |  n-th element	| => N operations needed
    \______________/		\______________/					\______________/

C. Binary Tree

    - Trees aren't ordered, so there is no n-th element

Winner : Array                  2nd : Linked List               3rd : Binary Tree

3. Finding / Accesing element X

A. Array

    - We need to iterate through the array until we reach X
 
     1   2         n
    --- --- ----- ---
   | A | B | ... | X | => n operations needed, where n is the index of X in the array.
    --- --- ----- ---

B. Linked List

    - We need to access elements sequentially starting from the first node until we reach X.

     ______________		 ______________						 ______________
    /              \   1 op	/              \   2nd op                (n-1)th op	/	       \
   |       A        | -------> |        B       | --------> ............ ------------> |        X	| => N operations needed, where N is the index of X in the list.
    \______________/		\______________/					\______________/

C. Binary Tree
    
            ---                            In most of the cases, the traversal of a binary tree is faster than the one of an array
           | C |                                or linked list because of the decreased number of operations.
            ---
         /       \ 1 op                    For instance, let's say that we have the set {C, A, L, E, C, X} represented as an array,
        /         \                             a linked list and a binary tree, with X being the last element. 
      ---         ---
     | A |       | L |                     X is the last element of a 6-element set => We need to make 6 operations to reach it for 
      ---         ---                           the Array and the Linked List.
               /      \ 2 op               
              /        \                   We take our ordered tree. 
            ---       ---                       
           | E |     | X | => 3 op         We know that X is our last element. The ordering criterion of the tree is the alphabetic order,
            ---       ---                       so X will be the biggest element.
                
    That means that X will be the last right node of the tree, so we can easily reach it by traversing the right part of the tree, by 3 OPERATIONS.

    The worst case of complexity would be when we all the elements in ascending order, creating a linear tree.

    However, the number of operations would be equal to the linked list and array cases = N, the index of X.
            
Winner : Binary Tree            2nd Place : Array / Linked List











